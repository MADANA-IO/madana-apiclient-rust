/*
 * madana-api
 *
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct RequestServiceApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> RequestServiceApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RequestServiceApiClient<C> {
        RequestServiceApiClient {
            configuration,
        }
    }
}

pub trait RequestServiceApi {
    fn add_data(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>>;
    fn cancel_processing(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>>;
    fn create_new_request(&self, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_actions(&self, limit: Option<&str>, offset: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>>;
    fn get_agent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>>;
    fn get_all_requests(&self, authorization: Option<&str>, created: Option<&str>, history: Option<&str>, limit: Option<&str>, new: Option<&str>, offset: Option<&str>, preview: Option<&str>, ready: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>>;
    fn get_data(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonSignedData, Error = Error<serde_json::Value>>>;
    fn get_request(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>>;
    fn get_result(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysisResult, Error = Error<serde_json::Value>>>;
    fn give_consent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>>;
    fn init_request_parameters(&self, uuid: &str, authorization: Option<&str>, body: Option<&str>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn set_agent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>>;
    fn set_result(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>RequestServiceApi for RequestServiceApiClient<C> {
    fn add_data(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}/data".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn cancel_processing(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}/cancel".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn create_new_request(&self, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests".to_string())
        ;
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn get_actions(&self, limit: Option<&str>, offset: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests/actions".to_string())
        ;
        if let Some(ref s) = limit {
            req = req.with_query_param("limit".to_string(), s.to_string());
        }
        if let Some(ref s) = offset {
            req = req.with_query_param("offset".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_agent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests/{uuid}/agent".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_all_requests(&self, authorization: Option<&str>, created: Option<&str>, history: Option<&str>, limit: Option<&str>, new: Option<&str>, offset: Option<&str>, preview: Option<&str>, ready: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests".to_string())
        ;
        if let Some(ref s) = created {
            req = req.with_query_param("created".to_string(), s.to_string());
        }
        if let Some(ref s) = history {
            req = req.with_query_param("history".to_string(), s.to_string());
        }
        if let Some(ref s) = limit {
            req = req.with_query_param("limit".to_string(), s.to_string());
        }
        if let Some(ref s) = new {
            req = req.with_query_param("new".to_string(), s.to_string());
        }
        if let Some(ref s) = offset {
            req = req.with_query_param("offset".to_string(), s.to_string());
        }
        if let Some(ref s) = preview {
            req = req.with_query_param("preview".to_string(), s.to_string());
        }
        if let Some(ref s) = ready {
            req = req.with_query_param("ready".to_string(), s.to_string());
        }
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_data(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonSignedData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests/{uuid}/data".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_request(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests/{uuid}".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_result(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysisResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/requests/{uuid}/result".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn give_consent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}/consent".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn init_request_parameters(&self, uuid: &str, authorization: Option<&str>, body: Option<&str>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn set_agent(&self, uuid: &str, authorization: Option<&str>) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}/agent".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn set_result(&self, uuid: &str, authorization: Option<&str>, body: Option<crate::models::JsonSignedData>) -> Box<dyn Future<Item = crate::models::JsonAnalysis, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/requests/{uuid}/result".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());
        if let Some(param_value) = authorization {
            req = req.with_header_param("Authorization".to_string(), param_value.to_string());
        }
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

}
